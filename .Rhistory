}
} else if (substr(rownames(data)[i],5,5) == "T") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
}
}
}
View(data)
View(data_prepost)
# TODO: REMOVE LATER!
# Set working directory to folder where all R code related to the study is stored
setwd("C:/Users/Sina-/Dropbox/Lehrstuhl/Diss/Auswertung/R/")
# Read coded data of first questionnaire
data = data.frame(read_csv2("output_data/data_pc_scored.csv", show_col_types = FALSE), row.names = 1)
# create a dataframe with 48 columns and as many rows as the data set has
# first 24 columns are values from the pretest
# second 24 columns are values from the posttest
data_prepost = data.frame(matrix(0,nrow(data),48),row.names = rownames(data))
names = c(
"a1_1",
"a1_2",
"a1_3",
"a1_4",
"a1_5",
"a1_6",
"a2_1",
"a2_2",
"a2_3",
"a2_4",
"a2_5",
"a2_6",
"b1_1",
"b1_2",
"b1_3",
"b1_4",
"b1_5",
"b1_6",
"b2_1",
"b2_2",
"b2_3",
"b2_4",
"b2_5",
"b2_6"
)
names_pre = names
names_post = names
for (i in 1:length(names)) {
names_pre[i] = paste("pre", names[i], sep="_")
names_post[i] = paste("post", names[i], sep="_")
}
colnames(data_prepost) = append(names_pre, names_post)
# write pre- and postest scores in the appropriate columns
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (substr(rownames(data)[i],5,5) == "Q") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
}
} else if (substr(rownames(data)[i],5,5) == "R") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
}
} else if (substr(rownames(data)[i],5,5) == "S") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
} else if (substr(rownames(data)[i],5,5) == "T") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
}
}
}
View(data_prepost)
# Read coded data of first questionnaire
data = data.frame(read_csv2("output_data/data_pc_scored.csv", show_col_types = FALSE), row.names = 1)
task_names = c(
"P1",
"K1",
"P3",
"K3",
"P5",
"K5",
"P2",
"K2",
"P4",
"K4",
"P6",
"K6",
"P7",
"K7",
"P9",
"K9",
"P11",
"K11",
"P8",
"K8",
"P10",
"K10",
"P12",
"K12"
)
# create a dataframe with 48 columns and as many rows as the data set has
# first 24 columns are values from the pretest
# second 24 columns are values from the posttest
data_prepost = data.frame(matrix(0,nrow(data),48),row.names = rownames(data))
names = c(
"a1_1",
"a1_2",
"a1_3",
"a1_4",
"a1_5",
"a1_6",
"a2_1",
"a2_2",
"a2_3",
"a2_4",
"a2_5",
"a2_6",
"b1_1",
"b1_2",
"b1_3",
"b1_4",
"b1_5",
"b1_6",
"b2_1",
"b2_2",
"b2_3",
"b2_4",
"b2_5",
"b2_6"
)
names_pre = names
names_post = names
for (i in 1:length(names)) {
names_pre[i] = paste("pre", names[i], sep="_")
names_post[i] = paste("post", names[i], sep="_")
}
colnames(data_prepost) = append(names_pre, names_post)
# write pre- and postest scores in the appropriate columns
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (substr(rownames(data)[i],5,5) == "Q") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
}
} else if (substr(rownames(data)[i],5,5) == "R") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
}
} else if (substr(rownames(data)[i],5,5) == "S") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
} else if (substr(rownames(data)[i],5,5) == "T") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
}
}
}
View(data_prepost)
# load helper function for transformation of matrix into separate columns for pre- and posttest
source("helper_functions/pre_post_transformation.R")
data = data.frame(read_csv2("output_data/data_pc_scored.csv", show_col_types = FALSE), row.names = 1)
task_names = c(
"P1",
"K1",
"P3",
"K3",
"P5",
"K5",
"P2",
"K2",
"P4",
"K4",
"P6",
"K6",
"P7",
"K7",
"P9",
"K9",
"P11",
"K11",
"P8",
"K8",
"P10",
"K10",
"P12",
"K12"
)
colnames(data) = task_names
data_rates = data
data_rates[data_rates == 55] = 0
data_rates[data_rates == 99] = NA
# solution rates in pretest and posttest
# TODO: checken ob pre_post_transformation auch mit der Datenstruktur von data_rates klar kommt
data_prepost_rates = pre_post_transformation(data_rates)
View(data_prepost_rates)
View(data)
###### compare rate of omitted responses in pretest and posttest
data_prepost = pre_post_transformation(data)
View(data_prepost)
View(data)
# load helper function for transformation of matrix into separate columns for pre- and posttest
source("helper_functions/pre_post_transformation.R")
# Read coded data of first questionnaire
data = data.frame(read_csv2("output_data/data_pc_scored.csv", show_col_types = FALSE), row.names = 1)
task_names = c(
"P1",
"K1",
"P3",
"K3",
"P5",
"K5",
"P2",
"K2",
"P4",
"K4",
"P6",
"K6",
"P7",
"K7",
"P9",
"K9",
"P11",
"K11",
"P8",
"K8",
"P10",
"K10",
"P12",
"K12"
)
colnames(data) = task_names
# Solution Rates
# For this purpose, replace omitted values (55) with 0 and nor reached values (99) with NA
data_rates = data
data_rates[data_rates == 55] = 0
data_rates[data_rates == 99] = NA
# solution rates in pretest and posttest
# TODO: checken ob pre_post_transformation auch mit der Datenstruktur von data_rates klar kommt
data_prepost_rates = pre_post_transformation(data_rates)
View(data_prepost_rates)
###### compare rate of omitted responses in pretest and posttest
data_prepost = pre_post_transformation(data)
data_pre = data_prepost[,1:24]
data_post = data_prepost[,25:48]
colnames(data_pre)=sapply(task_names, function(x) paste(x,"pre",sep="_"))
colnames(data_post)=sapply(task_names, function(x) paste(x,"post",sep="_"))
# calculate omitted rates for pretest
omit_pre = sapply(data_pre,function(x)  sum(x == 55 , na.rm = TRUE) / (sum(x == 55 , na.rm = TRUE) + sum(x == 99 , na.rm = TRUE) + sum(x == 0 , na.rm = TRUE) + sum(x == 1 , na.rm = TRUE) + sum(x == 2 , na.rm = TRUE)))
omit_post = sapply(data_post,function(x)  sum(x == 55 , na.rm = TRUE) / (sum(x == 55 , na.rm = TRUE) + sum(x == 99 , na.rm = TRUE) + sum(x == 0 , na.rm = TRUE) + sum(x == 1 , na.rm = TRUE) + sum(x == 2 , na.rm = TRUE)))
omit_pre
# print percentages for procedural and conceptual items
print ("Percentages omitted:")
print("Pretest procedural items:")
for (i in 1:24) {
if (i %% 2 == 1) {
print(omit_pre[i]*100)
}
}
print("Pretest conceptual items:")
for (i in 1:24) {
if (i %% 2 == 0) {
print(omit_pre[i]*100)
}
}
print("Posttest procedural items:")
for (i in 1:24) {
if (i %% 2 == 1) {
print(omit_post[i]*100)
}
}
print("Posttest conceptual items:")
for (i in 1:24) {
if (i %% 2 == 0) {
print(omit_post[i]*100)
}
}
data_rates = data
data_rates[data_rates == 55] = 0
data_rates[data_rates == 99] = NA
# solution rates in pretest and posttest
# TODO: checken ob pre_post_transformation auch mit der Datenstruktur von data_rates klar kommt
data_prepost_rates = pre_post_transformation(data_rates)
data_pre_rates = data_prepost_rates[,1:24]
data_post_rates = data_prepost_rates[,25:48]
colnames(data_pre_rates)=sapply(task_names, function(x) paste(x,"pre",sep="_"))
colnames(data_post_rates)=sapply(task_names, function(x) paste(x,"post",sep="_"))
sol_rates_dichot_pre = sapply(data_pre_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
sol_rates_dichot_post = sapply(data_post_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
sol_rates_polyt_pre = sapply(data_pre_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
sol_rates_polyt_post = sapply(data_post_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
sol_rates_dichot_pre
sol_rates_dichot_post = sapply(data_post_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
sol_rates_dichot_post
sol_rates_polyt_pre = sapply(data_pre_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
sol_rates_polyt_pre
sol_rates_polyt_post = sapply(data_post_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
sol_rates_polyt_post
library(tidyverse)
# Solution Rates
# For this purpose, replace omitted values (55) with 0 and nor reached values (99) with NA
data_rates = data
data_rates[data_rates == 55] = 0
data_rates[data_rates == 99] = NA
# Dichotomously scored items
# a2_1, a2_5, b2_1, b2_5, a1_2, a2_2, b1_2, b2_2, b2_4
# P2, P6, P8, P12, K1, K2, K7, K8, K10
# WARNING: Values cannot be interpreted for other items!
sol_rates_dichot = sapply(data_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
# solution rates in pretest and posttest
# TODO: checken ob pre_post_transformation auch mit der Datenstruktur von data_rates klar kommt
data_prepost_rates = pre_post_transformation(data_rates)
data_pre_rates = data_prepost_rates[,1:24]
data_post_rates = data_prepost_rates[,25:48]
sol_rates_dichot_pre = sapply(data_pre_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
sol_rates_dichot_post = sapply(data_post_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
sol_rates_polyt_pre = sapply(data_pre_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
sol_rates_polyt_post = sapply(data_post_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
sol_rates_dichot_pre
sol_rates_polyt_pre
sol_rates_polyt_post
solrates_dichot[1,2]
sol_rates_dichot[1,2]
sol_rates_dichot[c(1,2)]
sol_rates_dichot[c("P2","K3")]
# load helper function for transformation of matrix into separate columns for pre- and posttest
source("helper_functions/pre_post_transformation.R")
# Read coded data of first questionnaire
data = data.frame(read_csv2("output_data/data_pc_scored.csv", show_col_types = FALSE), row.names = 1)
task_names = c(
"P1",
"K1",
"P3",
"K3",
"P5",
"K5",
"P2",
"K2",
"P4",
"K4",
"P6",
"K6",
"P7",
"K7",
"P9",
"K9",
"P11",
"K11",
"P8",
"K8",
"P10",
"K10",
"P12",
"K12"
)
colnames(data) = task_names
# procedural items
data %>% count(P1)
data %>% count(P2)
data %>% count(P3)
data %>% count(P4)
data %>% count(P5)
data %>% count(P6)
data %>% count(P7)
data %>% count(P8)
data %>% count(P9)
data %>% count(P10)
data %>% count(P11)
data %>% count(P12)
# conceptual items
data %>% count(K1)
data %>% count(K2)
data %>% count(K3)
data %>% count(K4)
data %>% count(K5)
data %>% count(K6)
data %>% count(K7)
data %>% count(K8)
data %>% count(K9)
data %>% count(K10)
data %>% count(K11)
data %>% count(K12)
# Solution Rates
# For this purpose, replace omitted values (55) with 0 and nor reached values (99) with NA
data_rates = data
data_rates[data_rates == 55] = 0
data_rates[data_rates == 99] = NA
# Dichotomously scored items
# a2_1, a2_5, b2_1, b2_5, a1_2, a2_2, b1_2, b2_2, b2_4
# P2, P6, P8, P12, K1, K2, K7, K8, K10
# WARNING: Values cannot be interpreted for other items!
sol_rates_dichot = sapply(data_rates,function(x)  sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE)))
# Polytomously scored items (other)
# WARNING: Values cannot be interpreted for other items!
sol_rates_polyt = sapply(data_rates,function(x)  (sum(x, na.rm = TRUE) / (sum(x == 0, na.rm = TRUE) + sum(x == 1, na.rm = TRUE) +  sum(x == 2, na.rm = TRUE)))/2)
# build a vector that contains the correct solution rates
sol_rates = c(sol_rates_dichot[c("P2","P6","P8","P12","K1","K2","K7","K8","K10")],sol_rates_polyt[c("P1","P3","P4","P5","P7","P9","P10","P11","K3","K4","K5","K6","K9","K11","K12")])
# solution rates in pretest and posttest
sol_rates
min(sol_rates)
max(sol_ratesa)
max(sol_rates)
hist(sol_rates)
sol_rates[2,]
sol_rates[1,]
dim(sol_rates)
sol_rates[1]
rates_isoltated = c(0.6889849,0.5907080,0.7516199,0.5486726,0.3405172,0.4038877,0.6263499,0.3455724,0.7717391,0.5818966,0.3023758,0.2932900,0.4782609,0.6252700,0.3101952,0.2684783,0.4076923,0.5723542,0.6434783,0.2024336,
0.2807606,0.3796095,0.2437500,0.3795045)
hist(rates_isoltated)
hist(rates_isoltated)
hist(sol_rates)
# solution rates in pretest and posttest
# TODO: checken ob pre_post_transformation auch mit der Datenstruktur von data_rates klar kommt
data_prepost_rates = pre_post_transformation(data_rates)
data_pre_rates = data_prepost_rates[,1:24]
data_post_rates = data_prepost_rates[,25:48]
data_pre_rates
