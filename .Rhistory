df[i,index_mapper[j]] = 0
}
# keep merged original coded value if it cannot be mapped to 1 or 0
else {
if (data[i,j] == "na" && data[i,j+1] =="na") {
df[i,index_mapper[j]] = "na"
} else {
df[i,index_mapper[j]] = paste(data[i,j],data[i,j+1])
}
}
}
}
View(df)
View(data)
debugSource("C:/Users/Sina-/Dropbox/Lehrstuhl/Diss/Auswertung/R/transformation_0_1/transform_codes_to_0_1.R")
debug(transform_codes())
i
j
check_value(data[i,j],unlist(mapping_matrix["1",j]))
j
debug(transform_codes())
data[i,j]
data[i,j+1]
check_value(data[i,j],unlist(mapping_matrix["0",j]))
check_value = function(value, value_set, check_for_zero) {
# check if a coded value belongs to a certain value set
# if check_for_zero is true, it is enough that one value is in the set to return true
# value could contain a concatenated string of more than one code
# first, any existing spaces are removed
# next, a list with all codes is stored in values (could also be a list with just one element)
values = unlist(strsplit(str_replace_all(value, " ", ""), ","))
in_set = TRUE
for (code in values) {
if (check_for_zero && code %in% value_set) {
return(TRUE)
}
if (!(code %in% value_set)) {
in_set = FALSE
}
}
return(in_set)
}
transform_codes <- function(){
# TODO: add data as input later to function again
# TODO: remove later, just for debugging purposes
data <- read_csv2("C:/Users/Sina-/Dropbox/Lehrstuhl/Diss/Auswertung/R/irr/input_data/marc_19_20.csv", show_col_types = FALSE)
data = data.frame(data, row.names = 1)
# This function transforms coded data to values of 0 and 1
# The applied transformation rules are specified in "Transformationsregeln Kodierung.docx"
# Input value: data of type dataframe (?)
# Create a result data frame with 42 columns and corresponding column titles
df <- data.frame(matrix(ncol = 42, nrow = nrow(data)))
custom_names <- c(
"a1_1_1",
"a1_1_2",
"a1_1_3",
"a1_2",
"a1_3",
"a1_4_1",
"a1_4_2",
"a1_4_3",
"a1_4_4",
"a1_5",
"a1_6",
"a2_1",
"a2_2",
"a2_3",
"a2_4",
"a2_5",
"a2_6_1",
"a2_6_2",
"a2_6_3",
"a2_6_4",
"a2_6_5",
"b1_1_1",
"b1_1_2",
"b1_1_2",
"b1_2",
"b1_3",
"b1_4_1",
"b1_4_2",
"b1_4_3",
"b1_4_4",
"b1_5",
"b1_6",
"b2_1",
"b2_2",
"b2_3",
"b2_4",
"b2_5",
"b2_6_1",
"b2_6_2",
"b2_6_3",
"b2_6_4",
"b2_6_5"
)
colnames(df) <- custom_names
# rules for mapping
# left column: values that are transformed to 1
# right column: values that are transformed to 0
# tasks in A1
rules_a1 = matrix(list(
c("2"), c("1","0"),
c("2"), c("1","0"),
c("1"), c("2","0"),
c("k"), c("sp","i","g","nl","str","s","ab"),
c("k","1","2","sp"), c("3","4","kl","g","x","y","s","div","ab"),
c("k","fk","ff","ub","d","n"), c("f"),
c("1"), c("2","0"),
c("2"), c("1","0"),
c("1"), c("2","0"),
c("2"), c("1","0"),
c("k"), c("d","f","u"),
c(""), c("1,2,3,4,5"), # todo: wie geh ich hier mit allen FÃ¤llen um? Muss ich das handeln?
c("k","kr","ks"), c("kt","ku","ab","f")
),2)
# tasks in A2
rules_a2 = matrix(list(
c("5"), c("0","1","2","3","4","6"),
c("k"), c("e","sp","p","g","nl","str","s","ab"),
c("k","1","2","p"), c("3","4","kl","g","s","div","ab"),
c("k","fk","ff","ub","d","n"), c("f","int"),
c("k"), c("p","i","ab"),
c("k","d"), c("p", "f"),
c("5"), c("0","1","2","3","4","6","7","8","9","10","11","12"),
c("2"), c("1","0"),
c("2"), c("1","0"),
c("1"), c("2","0"),
c("1"), c("2","0"),
c("1"), c("2","0")
),2)
# tasks in B1
rules_b1 = matrix(list(
c("2"), c("1","0"),
c("1"), c("2","0"),
c("2"), c("1","0"),
c("k"), c("p","i","g","nl","str","s","ab"),
c("k","1","2","sp"), c("3","4","kl","g","x","y","s","div","ab"),
c("k","fk","ff","ub","d","n"), c("f"),
c("1"), c("2","0"),
c("1"), c("2","0"),
c("2"), c("1","0"),
c("2"), c("1","0"),
c("k","ks"), c("u","f"),
c("k","ks"), c("kt","ku","ab","f")
),2)
# tasks in B2
rules_b2 = matrix(list(
c("2"), c("0","1","3","4","5","6"),
c("k"), c("e","sp","l","g","nl","str","s","ab"),
c("k","1","2","p"), c("3","4","kl","g","s","div","ab"),
c("k","ff","nb"), c("f","fk","n","int"),
c("k","fp"), c("sp","i","ab"),
c("5"), c("0","1","2","3","4","6","7","8","9"),
c("2"), c("1","0"),
c("2"), c("1","0"),
c("1"), c("2","0"),
c("1"), c("2","0"),
c("1"), c("2","0")
),2)
mapping_matrix = cbind(rules_a1, rules_a2, rules_b1, rules_b2)
rownames(mapping_matrix) = c("1","0")
# vector that can be read as a function mapping the indexes of its entries to other indexes
# used to map all 48 coded columns to only 42 columns with 0 and 1
index_mapper = c(
1,2,3,4,5,5,6,7,8,9,10,10,11,12,13,14,14,15,15,16,17,18,19,20,21,22,23,24,25,26,26,27,28,29,30,31,32,33,34,35,35,36,37,38,39,40,41,42
)
# Transform all data by iterating over input data row-wise
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
# skip columns where multiple conditions must be met
if (j %in% c(5,6,12,16,17,18,19,30,31,40,41)){
next
}
# TODO: Seperate multiple comma seperated entries
# check whether entry evaluates to 1
#if(data[i,j] %in% unlist(mapping_matrix["1",j])) {
if (check_value(data[i,j],unlist(mapping_matrix["1",j]),FALSE)) {
df[i,index_mapper[j]] = 1
}
# check whether entry evaluates to 0
#else if(data[i,j] %in% unlist(mapping_matrix["0",j])) {
else if (check_value(data[i,j],unlist(mapping_matrix["0",j]),TRUE)) {
df[i,index_mapper[j]] = 0
}
# keep original coded value if it cannot be mapped to 1 or 0
else {
df[i,index_mapper[j]] = data[i,j]
}
}
}
# Transform data were multiple conditions must be met
# TODO: was wenn es nicht drin ist und nur eins von beidem nicht drin ist? dann wird check value false beim check ob es in 0 ist
for (i in 1:nrow(data)) {
for (j in c(5, 16, 18, 30, 40)) {
# both conditions must be met to be evaluated to 1
#if(data[i,j] %in% unlist(mapping_matrix["1",j]) && data[i,j+1] %in% unlist(mapping_matrix["1",j+1])) {
if(check_value(data[i,j],unlist(mapping_matrix["1",j]),FALSE) && check_value(data[i,j+1],unlist(mapping_matrix["1",j+1]),FALSE)) {
df[i,index_mapper[j]] = 1
}
# only one condition must be violated to be evaluated to 0
#else if(data[i,j] %in% unlist(mapping_matrix["0",j]) || data[i,j+1] %in% unlist(mapping_matrix["0",j+1])) {
else if(check_value(data[i,j],unlist(mapping_matrix["0",j]),TRUE) || check_value(data[i,j+1],unlist(mapping_matrix["0",j+1]),TRUE)) {
df[i,index_mapper[j]] = 0
}
# keep merged original coded value if it cannot be mapped to 1 or 0
else {
if (data[i,j] == "na" && data[i,j+1] =="na") {
df[i,index_mapper[j]] = "na"
} else {
df[i,index_mapper[j]] = paste(data[i,j],data[i,j+1])
}
}
}
}
View(df)
x=3
library(rstatix)
# effect sizes with Cohen's d
results_diff %>% cohens_d(diff_con ~ understanding, var.equal = TRUE) # TODO: kann ich annehmen, dass Varianzen gleich sind?
library(readr)
library(TAM)
library(tidyverse)
library(report)
library(rstatix)
# Set working directory to folder where all R code related to the study is stored
setwd("C:/Users/Sina-/Dropbox/Lehrstuhl/Diss/Auswertung/R")
diffics = as.matrix(read.table("gdm_24/output_data/item_diffics.csv", sep=",", header=FALSE))
# get data
data = read_csv2("gdm_24/output_data/class13-20_gruppe_1_3_cleaned_manuallySorted.csv", show_col_types = FALSE)
data = data.frame(data, row.names = 1)
# create a dataframe with 48 columns and as many rows as the data set has
# first 24 columns are values from the pretest
# second 24 columns are values from the posttest
data_prepost = data.frame(matrix(0,nrow(data),48),row.names = rownames(data))
names = c(
"a1_1",
"a1_2",
"a1_3",
"a1_4",
"a1_5",
"a1_6",
"a2_1",
"a2_2",
"a2_3",
"a2_4",
"a2_5",
"a6_1",
"b1_1",
"b1_2",
"b1_3",
"b1_4",
"b1_5",
"b1_6",
"b2_1",
"b2_2",
"b2_3",
"b2_4",
"b2_5",
"b2_6"
)
names_pre = names
names_post = names
for (i in 1:length(names)) {
names_pre[i] = paste("pre", names[i], sep="_")
names_post[i] = paste("post", names[i], sep="_")
}
colnames(data_prepost) = append(names_pre, names_post)
# write pre- and postest scores in the appropriate columns
#TODO: crosschecken ob alles richtig zugeordnet wird
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
if (substr(rownames(data)[i],5,5) == "Q") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
}
} else if (substr(rownames(data)[i],5,5) == "R") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
}
} else if (substr(rownames(data)[i],5,5) == "S") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
} else if (substr(rownames(data)[i],5,5) == "T") {
if (substr(colnames(data)[j],1,2)=="a1") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
} else if (substr(colnames(data)[j],1,2)=="a2") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b1") {
data_prepost[i,j+24] = data[i,j]
data_prepost[i,j] = NA
} else if (substr(colnames(data)[j],1,2)=="b2") {
data_prepost[i,j] = data[i,j]
data_prepost[i,j+24] = NA
}
}
}
}
###### 4-dimensional Rasch-Analysis ######
# first dimension: pretest procedural
# second dimension: pretest conceptual
# third dimension: posttest procedural
# fourth dimension: posttest conceptual
# create Q matrix
Q = matrix(0,48,4)
# dimension 1 and 2
for (i in 1:24) {
if (i %% 2 == 0) { # conceptual item
Q[i,2] = 1
} else { # procedural item
Q[i,1] = 1
}
}
# dimension 3 and 4
for (i in 25:48) {
if (i %% 2 == 0) { # conceptual item
Q[i,4] = 1
} else { # procedural item
Q[i,3] = 1
}
}
# the difficulty vector of the stroed difficulties only has 24 items however we need 48 entries
# as pretest and posttest are treated separately
# model expects array with 2 columns, first indicates index of item
diffics_model = cbind(1:48, append(diffics,diffics))
# analysis of items
mod <- TAM::tam.mml( resp=data_prepost, Q=Q,  xsi.fixed = diffics_model, pid=rownames(data_prepost), control=list(snodes=2000) )
mp <- mod$person # TODO: das ist nicht der korrekte schÃ¤tzer!!!!!!!
fitting = (tam.fit(mod))$itemfit
# create a results table
results = data.frame(cbind(mp$EAP.Dim1,mp$EAP.Dim2,mp$EAP.Dim3,mp$EAP.Dim4,matrix(0,nrow(data),1)),row.names = rownames(data))
colnames(results) = c("pre_pro","pre_con","post_pro","post_con","understanding")
# indicate which groups received the video rich with elements of understanding
for (i in 1:nrow(results)) {
if (substr(rownames(results)[i],1,1) == "3") {
results[i,5] = 1
}
}
# summarise means of different groups for all four dimensions
m_pre_pro <- results %>%
group_by(understanding) %>%
summarise(m = mean(pre_pro)) %>%
arrange(m)
m_pre_con <- results %>%
group_by(understanding) %>%
summarise(m = mean(pre_con)) %>%
arrange(m)
m_post_pro <- results %>%
group_by(understanding) %>%
summarise(m = mean(post_pro)) %>%
arrange(m)
m_post_con <- results %>%
group_by(understanding) %>%
summarise(m = mean(post_con)) %>%
arrange(m)
# arrange data by dimension with a column for each group
#group3 = results %>% filter(understanding == 1) # group with videos rich in elements of understanding
#group1 = results %>% filter(understanding == 0)
#pre_pro = data.frame(cbind(group1$pre_pro,group3$pre_pro)) # TODO: das klappt weil beide vektoren gleich viele Zeilen haben. Was wÃ¤re wenn das nicht so ist?
#colnames(pre_pro) = c("group1","group3")
# t-test to check whether means of pretest are statistically different (they should not be)
t_pre_pro = t.test(pre_pro ~ understanding, data = results)
t_pre_con = t.test(pre_con ~ understanding, data = results)
# t-test whether means of posttest are atatistically different (
# TODO: sollte man machen kÃ¶nnen weil prescores nicht statistisch unterschiedlich sind?
# wahrscheinlich nicht! Weil statistisch nicht signifikante unterschiede im pretest werden im posttest dann ggf. signifikant!
t_post_pro = t.test(post_pro ~ understanding, data = results)
t_post_con = t.test(post_con ~ understanding, data = results)
# create diff score results table
diff_pro = results$post_pro - results$pre_pro
diff_con = results$post_con - results$pre_con
results_diff = data.frame(cbind(diff_pro,diff_con,results$understanding),row.names = rownames(results))
colnames(results_diff) = c("diff_pro","diff_con","understanding")
# t-test for diff scores
t_diff_pro = t.test(diff_pro ~ understanding, data = results_diff)
t_diff_con = t.test(diff_con ~ understanding, data = results_diff)
# effect sizes with Cohen's d
results_diff %>% cohens_d(diff_con ~ understanding, var.equal = TRUE) # TODO: kann ich annehmen, dass Varianzen gleich sind?
# split procedural and conceptual results into two tables
result_pro = select(results, pre_pro, post_pro, understanding)
result_con = select(results, pre_con, post_con, understanding)
results_pro
# split procedural and conceptual results into two tables
results_pro = select(results, pre_pro, post_pro, understanding)
results_con = select(results, pre_con, post_con, understanding)
results_pro
results_pro = cbind(rownames(results_pro,results_pro))
results_pro
# split procedural and conceptual results into two tables where the particpants codes are also a columns
results_pro = select(results, pre_pro, post_pro, understanding)
results_pro = cbind(rownames(results_pro), results_pro)
results_pro
rownames(results_pro) = NULL
results_pro
colnames(results_pro) = c("code","pre_pro","post_pro","understanding")
results_pro
results_pro = select(results, pre_pro, post_pro, understanding)
results_pro = cbind(rownames(results_pro), results_pro)
rownames(results_pro) = NULL
colnames(results_pro) = c("code","pre_pro","post_pro","understanding")
# conceptual
results_con = select(results, pre_con, post_con, understanding)
results_con = cbind(rownames(results_con), results_con)
rownames(results_con) = NULL
colnames(results_con) = c("code","pre_con","post_con","understanding")
# convert columns of pretest and posttest into single columns (with two rows per subject)
# procedural
results_pro_sc = results_pro %>%
gather(key = "test", value = "score", pre_pro, post_pro) %>%
convert_as_factor(code, test)
results_pro_sc
bxp <- ggboxplot(
results_pro_sc, x = "test", y = "score",
color = "group", palette = "jco"
)
library(ggplot2)
bxp <- ggboxplot(
results_pro_sc, x = "test", y = "score",
color = "group", palette = "jco"
)
library(ggpubr)
bxp
bxp <- ggboxplot(
results_pro_sc, x = "test", y = "score",
color = "group", palette = "jco"
)
library(ggpubr)
bxp <- ggboxplot(
results_pro_sc, x = "test", y = "score",
color = "group", palette = "jco"
)
# Two-way mixed ANOVA test
res.aov <- anova_test(
data = results_pro_sc, dv = score, wid = code,
between = understanding, within = test
)
get_anova_table(res.aov)
summary(res.anova)
summary(res.aov)
# conceptual
results_con_sc = results_con %>%
gather(key = "test", value = "score", pre_con, post_con) %>%
convert_as_factor(code, test)
results_con_sc
# conceptual
res.aov <- anova_test(
data = results_con_sc, dv = score, wid = code,
between = understanding, within = test
)
get_anova_table(res.aov)
# Two-way mixed ANOVA test
# procedural
anova_pro <- anova_test(
data = results_pro_sc, dv = score, wid = code,
between = understanding, within = test
)
anova_con
# conceptual
anova_con <- anova_test(
data = results_con_sc, dv = score, wid = code,
between = understanding, within = test
)
f_con = sqrt(anova_con$ANOVA$ges/(1-anova_con$ANOVA$ges))
f_con
anova_con
anova$con$ANOVA
anova_con$ANOVA
anova_con$ges
anova_con$ges[3]
f_con = sqrt(anova_con$ges[3]/(1-anova_con$ges[3]))
f_con
# Two-way mixed ANOVA test
# procedural
anova_pro <- anova_test(
data = results_pro_sc, dv = score, wid = code,
between = understanding, within = test
)
anova_pro_ges
anova_pro$ges
